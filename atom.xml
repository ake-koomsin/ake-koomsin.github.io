<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ake Koomsin]]></title>
  <link href="http://ake.in.th/atom.xml" rel="self"/>
  <link href="http://ake.in.th/"/>
  <updated>2015-02-12T11:35:36+09:00</updated>
  <id>http://ake.in.th/</id>
  <author>
    <name><![CDATA[Ake Koomsin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seeing All Man Pages Available in a Section on FreeBSD]]></title>
    <link href="http://ake.in.th/2015/02/04/seeing-all-pages-available-in-section-9-on-freebsd/"/>
    <updated>2015-02-04T18:19:47+09:00</updated>
    <id>http://ake.in.th/2015/02/04/seeing-all-pages-available-in-section-9-on-freebsd</id>
    <content type="html"><![CDATA[<p>When I am working with a kernel module in FreeBSD, there are times that I want to see all functions available in <code>man 9</code>.
I know that <code>apropos</code> is out there but I sometimes don&rsquo;t know the keyword.</p>

<p>Because of this, I decided to write a simple zsh script to list all available pages in a section, not only in section 9.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>function ls_man() {
</span><span class='line'>    if [[ $# -ne 1 ]]; then
</span><span class='line'>        echo &quot;Number of argument must be 1&quot; &gt;&amp;2
</span><span class='line'>        echo &quot;Usage: ls_man [1-9]&quot; &gt;&amp;2
</span><span class='line'>        return 1
</span><span class='line'>    fi
</span><span class='line'>
</span><span class='line'>    if [[ $1 == [1-9] ]]; then
</span><span class='line'>        ls /usr/share/man/man$1 | awk &#39;{ split($1, name, &quot;.&quot;) } { print name[1] }&#39;
</span><span class='line'>        return 0
</span><span class='line'>    else
</span><span class='line'>        echo &quot;Wrong argument&quot; &gt;&amp;2
</span><span class='line'>        echo &quot;Usage: ls_man [1-9]&quot; &gt;&amp;2
</span><span class='line'>        return 1
</span><span class='line'>    fi
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Mapping in Kernel Space on FreeBSD]]></title>
    <link href="http://ake.in.th/2014/11/22/memory-mapping-in-kernel-space-on-freebsd/"/>
    <updated>2014-11-22T13:13:46+09:00</updated>
    <id>http://ake.in.th/2014/11/22/memory-mapping-in-kernel-space-on-freebsd</id>
    <content type="html"><![CDATA[<p>It might sound strange to do some memory mapping in the kernel space. You probably have heard of <a href="http://netbsd.gw.com/cgi-bin/man-cgi?bpfjit+4.pmax+NetBSD-current" title="BPFJIT">bpfjit</a>. It is a JIT compiler of filter program sent to a bpf device. Bpfjit uses <a href="http://sljit.sourceforge.net" title="Stack-Less Just-In-Time library">sljit</a> library for compiling. One requirement of JIT compiler is that the compiled code must reside in executable memory area. Let&rsquo;s take a look at the sljit source code in the NetBSD tree to see how it is done.</p>

<figure class='code'><figcaption><span>In sys/external/bsd/sljit/dist/sljit_src/sljitExecAllocator.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">static</span> <span class="n">SLJIT_INLINE</span> <span class="kt">void</span><span class="o">*</span> <span class="n">alloc_chunk</span><span class="p">(</span><span class="n">sljit_uw</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef _KERNEL</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">uvm_km_alloc</span><span class="p">(</span><span class="n">module_map</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>      <span class="n">PAGE_SIZE</span><span class="p">,</span> <span class="n">UVM_KMF_WIRED</span> <span class="o">|</span> <span class="n">UVM_KMF_ZERO</span> <span class="o">|</span> <span class="n">UVM_KMF_EXEC</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">retval</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span> <span class="o">|</span> <span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">retval</span> <span class="o">!=</span> <span class="n">MAP_FAILED</span><span class="p">)</span> <span class="o">?</span> <span class="n">retval</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally, <code>mmap()</code> is used along with <code>PROT_EXEC</code> and <code>MAP_ANON</code> in user space application to allocate executable memory area. However, in kernel space, it requires another function to do. In NetBSD, <code>uvm_km_alloc()</code> is used with <code>UVM_KMF_EXEC</code> flag to allocate executable memory area. Noting that the <code>UVM_KMF_EXEC</code> flag is not written in the <code>uvm_km_alloc()</code> man page.</p>

<p>However, after spending hours in both source code and man page of FreeBSD, it seems that there is no kernel memory allocation API to allocate executable memory. That makes me read the implementation of <code>mmap()</code>. After studying the source code for a while, it is possible to do memory mapping in the kernel as shown below.</p>

<figure class='code'><figcaption><span>Part of kernel module code example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">example_syscall</span><span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vm_offset_t</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vm_size_t</span> <span class="n">size</span><span class="p">,</span> <span class="n">pageoff</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">objtype_t</span> <span class="n">handle_type</span> <span class="o">=</span> <span class="n">OBJT_DEFAULT</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vm_prot_t</span> <span class="n">maxprot</span> <span class="o">=</span> <span class="n">VM_PROT_ALL</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">MAP_ANON</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">off_t</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;original size: %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Align the file position to a page boundary,</span>
</span><span class='line'><span class="cm">  * and save its page offset component.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">pageoff</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&amp;</span> <span class="n">PAGE_MASK</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pageoff: %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pageoff</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pos</span> <span class="o">-=</span> <span class="n">pageoff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pos: %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Adjust size for rounding (on both ends). */</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">+=</span> <span class="n">pageoff</span><span class="p">;</span>            <span class="cm">/* low end... */</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;size+=pageoff: %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">vm_size_t</span><span class="p">)</span> <span class="n">round_page</span><span class="p">(</span><span class="n">size</span><span class="p">);</span> <span class="cm">/* hi end */</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;size after round page: %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">error</span> <span class="o">=</span> <span class="n">vm_mmap</span><span class="p">(</span><span class="n">kernel_map</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">maxprot</span><span class="p">,</span>
</span><span class='line'>            <span class="n">maxprot</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">handle_type</span><span class="p">,</span> <span class="n">handle</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>   
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">kernacc</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">VM_PROT_EXECUTE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vm_map_lock</span><span class="p">(</span><span class="n">kernel_map</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vm_map_delete</span><span class="p">(</span><span class="n">kernel_map</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">addr</span> <span class="o">+</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vm_map_unlock</span><span class="p">(</span><span class="n">kernel_map</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of running this system call is shown below.</p>

<figure class='code'><figcaption><span>Result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>original size: 80
</span><span class='line'>pageoff: 0
</span><span class='line'>pos: 0
</span><span class='line'>size+=pageoff: 80
</span><span class='line'>size after round page: 4096
</span><span class='line'>result: 1
</span></code></pre></td></tr></table></div></figure>


<p><code>vm_mmap()</code> is an internal implementation of <code>mmap()</code> and <code>vm_map_delete()</code> is an internal implementation of <code>munmap()</code>. The first argument of both <code>vm_map()</code> and <code>vm_map_delete()</code> is the memory area to map. Normally it would be the map of the process virtual memory address space. In this case, it is <code>kernel_map</code> which is a global variable. The important thing is aligning and rounding. Otherwise, it will end up in kernel panic because of page fault. Noting that the aligning and rounding comment in the example are from FreeBSD&rsquo;s <code>sys_mmap()</code> source code.</p>

<p>The <code>kernacc()</code> function is for testing a memory area if it is readable, writable, executable or not. In the example, it tests if the memory area is executable or not. The result is yes. Noting that in the example I specify that the memory is readable, writable and executable through <code>VM_PROT_ALL</code>.</p>

<p>One good thing about using <code>vm_map()</code> for memory allocation is it is possible to change the memory protection easily through <code>vm_map_protect()</code>, the internal implementation of <code>mprotect()</code>. One probably wants the memory to be read and write only during JIT compilation and read and execute only after that for security reason.</p>

<p>And that&rsquo;s all about doing memory mapping in kernel space on FreeBSD. Happy Kernel Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verifing OpenBSD Install Media on OS X]]></title>
    <link href="http://ake.in.th/2014/11/04/verify-openbsd-install-media-from-os-x/"/>
    <updated>2014-11-04T20:07:13+09:00</updated>
    <id>http://ake.in.th/2014/11/04/verify-openbsd-install-media-from-os-x</id>
    <content type="html"><![CDATA[<p>New <a href="http://www.openbsd.org/56.html">OpenBSD 5.6</a> has been released. It is time to give it a try.</p>

<p>In the installation maunal, There is a section &ldquo;Verifying the OpenBSD Installation Media&rdquo;. <code>signify</code> command is used for verification.</p>

<figure class='code'><figcaption><span>Verifying the install media</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>signify -C -p /etc/signify/openbsd-56-base.pub -x SHA256.sig cd56.iso
</span></code></pre></td></tr></table></div></figure>


<p>The <code>SHA256.sig</code> and <code>cd56.iso</code> can be obtained from the mirror. However, <code>openbsd-56-base.pub</code> file is not available. In addition, there is no <code>signify</code> in default OS X installation.</p>

<p>To use <code>signify</code> to verify the install media, we can do the following:</p>

<p>1) Install <code>signify</code> from either <code>port</code> or <code>homebrew</code>.</p>

<figure class='code'><figcaption><span>Install signify from homebrew</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>brew install signify-osx
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>2) Copy the public key from <a href="http://www.openbsd.org/56.html">http://www.openbsd.org/56.html</a> and create a file to store the key. It is required that the file must start with &ldquo;untrusted comment: &rdquo;.</p>

<figure class='code'><figcaption><span>56.pub</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>untrusted comment: signify public key for OpenBSD 5.6
</span><span class='line'>RWR0EANmo9nqhpPbPUZDIBcRtrVcRwQxZ8UKGWY8Ui4RHi229KFL84wV
</span></code></pre></td></tr></table></div></figure>


<p>3) Verify. In my case, I verify the <code>install56.fs</code> which is for creating bootable USB. In my case, every file is in the same directory.</p>

<figure class='code'><figcaption><span>Verify</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>signify -C -p 56.pub -x SHA256.sig install56.fs
</span></code></pre></td></tr></table></div></figure>


<p>The final result should look like this.</p>

<figure class='code'><figcaption><span>Final result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Signature Verified
</span><span class='line'>install56.fs: OK
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging Around FreeBSD Socket API TCP Send Path]]></title>
    <link href="http://ake.in.th/2014/07/04/digging-around-freebsd-socket-api-tcp-send-path/"/>
    <updated>2014-07-04T00:08:26+09:00</updated>
    <id>http://ake.in.th/2014/07/04/digging-around-freebsd-socket-api-tcp-send-path</id>
    <content type="html"><![CDATA[<p>When we want to send data across network, it involves either</p>

<ul>
<li><code>write()/writev()</code></li>
<li><code>send()/sendto()/sendmsg()</code></li>
</ul>


<p>and sockets.</p>

<p>To use <code>write()</code>, <code>writev()</code> and <code>send()</code>, the socket must be connected. On the other hand <code>sendto()</code> and <code>sendmsg()</code> can be used in both connected and unconnected connection.</p>

<p>We normally can find the implementation of system calls in the kernel by adding ‘sys_’ prefix to the name of the system call except <code>send()</code>. In FreeBSD libc, <code>send()</code> is just a wrapper of <code>sendto()</code> with some default parameters.</p>

<p>Let’s take a look at <code>sys_write()</code>.</p>

<figure class='code'><figcaption><span>In sys/kern/sys_generic.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">sys_write</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">uap</span><span class="p">)</span>
</span><span class='line'>    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">write_args</span> <span class="o">*</span><span class="n">uap</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">uio</span> <span class="n">auio</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">iovec</span> <span class="n">aiov</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">uap</span><span class="o">-&gt;</span><span class="n">nbyte</span> <span class="o">&gt;</span> <span class="n">IOSIZE_MAX</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aiov</span><span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">uap</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>  <span class="n">aiov</span><span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">nbyte</span><span class="p">;</span>
</span><span class='line'>  <span class="n">auio</span><span class="p">.</span><span class="n">uio_iov</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">aiov</span><span class="p">;</span>
</span><span class='line'>  <span class="n">auio</span><span class="p">.</span><span class="n">uio_iovcnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">auio</span><span class="p">.</span><span class="n">uio_resid</span> <span class="o">=</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">nbyte</span><span class="p">;</span>
</span><span class='line'>  <span class="n">auio</span><span class="p">.</span><span class="n">uio_segflg</span> <span class="o">=</span> <span class="n">UIO_USERSPACE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">error</span> <span class="o">=</span> <span class="n">kern_writev</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">auio</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is just a special form of <code>writev()</code> as it calls <code>kern_writev()</code> eventually. Taking a look at <code>kern_writev()</code> gives us some interesting code pattern.</p>

<figure class='code'><figcaption><span>In sys/kern/sys_generic.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">kern_writev</span><span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">uio</span> <span class="o">*</span><span class="n">auio</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cap_rights_t</span> <span class="n">rights</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">fget_write</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">cap_rights_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rights</span><span class="p">,</span> <span class="n">CAP_WRITE</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">dofilewrite</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">fp</span><span class="p">,</span> <span class="n">auio</span><span class="p">,</span> <span class="p">(</span><span class="kt">off_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fdrop</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">td</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fget_write()</code> is called to verify that we have permission to perform write operation and get a pointer to the file associated with the file descriptor. After thus function call, the reference count of the file is increased. That is why in the end <code>fdrop()</code> macro is called to decrease the reference count and perform some cleanup if necessary.</p>

<p>The write operation happens when <code>dofilewrite()</code> is called.</p>

<figure class='code'><figcaption><span>In sys/kern/sys_generic.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="n">dofilewrite</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">fp</span><span class="p">,</span> <span class="n">auio</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'>    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">uio</span> <span class="o">*</span><span class="n">auio</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">off_t</span> <span class="n">offset</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">error</span> <span class="o">=</span> <span class="n">fo_write</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">auio</span><span class="p">,</span> <span class="n">td</span><span class="o">-&gt;</span><span class="n">td_ucred</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">td</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>dofilewrite()</code> performs some verification and dispatches write operating to an appropriate function by calling <code>fo_write()</code>. The real write function depends on the type of the file.</p>

<figure class='code'><figcaption><span>In sys/sys/file.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">__inline</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">fo_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">uio</span> <span class="o">*</span><span class="n">uio</span><span class="p">,</span> <span class="k">struct</span> <span class="n">ucred</span> <span class="o">*</span><span class="n">active_cred</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="o">*</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">f_ops</span><span class="o">-&gt;</span><span class="n">fo_write</span><span class="p">)(</span><span class="n">fp</span><span class="p">,</span> <span class="n">uio</span><span class="p">,</span> <span class="n">active_cred</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">td</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For socket, file operations are defined as follows.</p>

<figure class='code'><figcaption><span>In sys/kern/sys_socket.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">fileops</span>    <span class="n">socketops</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_read</span> <span class="o">=</span> <span class="n">soo_read</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_write</span> <span class="o">=</span> <span class="n">soo_write</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_truncate</span> <span class="o">=</span> <span class="n">soo_truncate</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_ioctl</span> <span class="o">=</span> <span class="n">soo_ioctl</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_poll</span> <span class="o">=</span> <span class="n">soo_poll</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_kqfilter</span> <span class="o">=</span> <span class="n">soo_kqfilter</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_stat</span> <span class="o">=</span> <span class="n">soo_stat</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_close</span> <span class="o">=</span> <span class="n">soo_close</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_chmod</span> <span class="o">=</span> <span class="n">invfo_chmod</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_chown</span> <span class="o">=</span> <span class="n">invfo_chown</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_sendfile</span> <span class="o">=</span> <span class="n">invfo_sendfile</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fo_flags</span> <span class="o">=</span> <span class="n">DFLAG_PASSABLE</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That means the actual write function is <code>soo_write()</code>.</p>

<figure class='code'><figcaption><span>In sys/kern/sys_socket.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">soo_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">uio</span> <span class="o">*</span><span class="n">uio</span><span class="p">,</span> <span class="k">struct</span> <span class="n">ucred</span> <span class="o">*</span><span class="n">active_cred</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">f_data</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef MAC</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">mac_socket_check_send</span><span class="p">(</span><span class="n">active_cred</span><span class="p">,</span> <span class="n">so</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">sosend</span><span class="p">(</span><span class="n">so</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">uio</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">uio</span><span class="o">-&gt;</span><span class="n">uio_td</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="n">EPIPE</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">so</span><span class="o">-&gt;</span><span class="n">so_options</span> <span class="o">&amp;</span> <span class="n">SO_NOSIGPIPE</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PROC_LOCK</span><span class="p">(</span><span class="n">uio</span><span class="o">-&gt;</span><span class="n">uio_td</span><span class="o">-&gt;</span><span class="n">td_proc</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tdsignal</span><span class="p">(</span><span class="n">uio</span><span class="o">-&gt;</span><span class="n">uio_td</span><span class="p">,</span> <span class="n">SIGPIPE</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PROC_UNLOCK</span><span class="p">(</span><span class="n">uio</span><span class="o">-&gt;</span><span class="n">uio_td</span><span class="o">-&gt;</span><span class="n">td_proc</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, <code>soo_write()</code> performs some necessary verification and calls <code>sosend()</code>.</p>

<p>Before we go further, let’s take a look at <code>sys_sendt()</code> to see how it differs from normal <code>write()</code> system call.</p>

<figure class='code'><figcaption><span>In sys/kern/uipc_syscalls.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">sys_sendto</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">uap</span><span class="p">)</span>
</span><span class='line'>    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sendto_args</span> <span class="cm">/* {</span>
</span><span class='line'><span class="cm">        int s;</span>
</span><span class='line'><span class="cm">        caddr_t buf;</span>
</span><span class='line'><span class="cm">        size_t  len;</span>
</span><span class='line'><span class="cm">        int flags;</span>
</span><span class='line'><span class="cm">        caddr_t to;</span>
</span><span class='line'><span class="cm">        int tolen;</span>
</span><span class='line'><span class="cm">    } */</span> <span class="o">*</span><span class="n">uap</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">msghdr</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">iovec</span> <span class="n">aiov</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_name</span> <span class="o">=</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">tolen</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iov</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">aiov</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iovlen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_control</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifdef COMPAT_OLDSOCK</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="n">aiov</span><span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aiov</span><span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sendit</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="n">uap</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>sys_sendmsg()</code> is similar to <code>sys_sendto()</code>. They just handle the arguments differently. They both call <code>sendit()</code> at the end. <code>sendit()</code> performs some check and call <code>kern_sendit()</code> which call <code>sosend()</code> eventually.</p>

<figure class='code'><figcaption><span>In sys/kern/uipc_syscalls.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="n">sendit</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">mp</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'>    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="n">mp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">kern_sendit</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">mp</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">control</span><span class="p">,</span> <span class="n">UIO_USERSPACE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">kern_sendit</span><span class="p">(</span><span class="n">td</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">mp</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">control</span><span class="p">,</span> <span class="n">segflg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="n">mp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">control</span><span class="p">;</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">uio_seg</span> <span class="n">segflg</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">sosend</span><span class="p">(</span><span class="n">so</span><span class="p">,</span> <span class="n">mp</span><span class="o">-&gt;</span><span class="n">msg_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">auio</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">control</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">td</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>sosend()</code> is a basically a wrapper of the function pointed by <code>pru_sosend</code>.</p>

<figure class='code'><figcaption><span>In sys/kern/uipc_socket.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">sosend</span><span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="k">struct</span> <span class="n">uio</span> <span class="o">*</span><span class="n">uio</span><span class="p">,</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">top</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">control</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CURVNET_SET</span><span class="p">(</span><span class="n">so</span><span class="o">-&gt;</span><span class="n">so_vnet</span><span class="p">);</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">so</span><span class="o">-&gt;</span><span class="n">so_proto</span><span class="o">-&gt;</span><span class="n">pr_usrreqs</span><span class="o">-&gt;</span><span class="n">pru_sosend</span><span class="p">(</span><span class="n">so</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">uio</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span>
</span><span class='line'>        <span class="n">control</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">td</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CURVNET_RESTORE</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, the actual function depends on the protocol type. In case of TCP, the <code>pru_sosend</code> points to <code>sosend_generic()</code> (This is the default value. UDP has its own <code>sosend_dgram()</code>).</p>

<figure class='code'><figcaption><span>In sys/kern/uipc_generic.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">sosend_generic</span><span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="k">struct</span> <span class="n">uio</span> <span class="o">*</span><span class="n">uio</span><span class="p">,</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">top</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">control</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">space</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">resid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">clen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">dontroute</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">atomic</span> <span class="o">=</span> <span class="n">sosendallatonce</span><span class="p">(</span><span class="n">so</span><span class="p">)</span> <span class="o">||</span> <span class="n">top</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">             * XXX all the SBS_CANTSENDMORE checks previously</span>
</span><span class='line'><span class="cm">             * done could be out of date.  We could have recieved</span>
</span><span class='line'><span class="cm">             * a reset packet in an interrupt or maybe we slept</span>
</span><span class='line'><span class="cm">             * while doing page faults in uiomove() etc.  We</span>
</span><span class='line'><span class="cm">             * could probably recheck again inside the locking</span>
</span><span class='line'><span class="cm">             * protection here, but there are probably other</span>
</span><span class='line'><span class="cm">             * places that this also happens.  We must rethink</span>
</span><span class='line'><span class="cm">             * this.</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="n">VNET_SO_ASSERT</span><span class="p">(</span><span class="n">so</span><span class="p">);</span>
</span><span class='line'>            <span class="n">error</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">so</span><span class="o">-&gt;</span><span class="n">so_proto</span><span class="o">-&gt;</span><span class="n">pr_usrreqs</span><span class="o">-&gt;</span><span class="n">pru_send</span><span class="p">)(</span><span class="n">so</span><span class="p">,</span>
</span><span class='line'>                <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">MSG_OOB</span><span class="p">)</span> <span class="o">?</span> <span class="n">PRUS_OOB</span> <span class="o">:</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At some point in <code>sosend_generic()</code>, <code>pru_send</code> function pointer is called. For TCP, this points to function <code>tcp_user_send()</code>.</p>

<figure class='code'><figcaption><span>In sys/netinet/tcp_usrreq.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">tcp_usr_send</span><span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">nam</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">control</span><span class="p">,</span> <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">td</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>        <span class="n">tp</span><span class="o">-&gt;</span><span class="n">snd_up</span> <span class="o">=</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">snd_una</span> <span class="o">+</span> <span class="n">so</span><span class="o">-&gt;</span><span class="n">so_snd</span><span class="p">.</span><span class="n">sb_cc</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tp</span><span class="o">-&gt;</span><span class="n">t_flags</span> <span class="o">|=</span> <span class="n">TF_FORCEDATA</span><span class="p">;</span>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="n">tcp_output</span><span class="p">(</span><span class="n">tp</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tp</span><span class="o">-&gt;</span><span class="n">t_flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">TF_FORCEDATA</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data is passed to <code>tcp_output()</code> to figure out what to be sent and send it to lower layer by <code>ip_output()</code>.</p>

<figure class='code'><figcaption><span>In sys/netinet/tcp_output.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">tcp_output</span><span class="p">(</span><span class="k">struct</span> <span class="n">tcpcb</span> <span class="o">*</span><span class="n">tp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>        <span class="n">TCP_PROBE5</span><span class="p">(</span><span class="n">send</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">tp</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">tp</span><span class="p">,</span> <span class="n">th</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="n">ip_output</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">t_inpcb</span><span class="o">-&gt;</span><span class="n">inp_options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ro</span><span class="p">,</span>
</span><span class='line'>            <span class="p">((</span><span class="n">so</span><span class="o">-&gt;</span><span class="n">so_options</span> <span class="o">&amp;</span> <span class="n">SO_DONTROUTE</span><span class="p">)</span> <span class="o">?</span> <span class="n">IP_ROUTETOIF</span> <span class="o">:</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="n">tp</span><span class="o">-&gt;</span><span class="n">t_inpcb</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eventually, the data in mbuf will be passed to the device driver through <code>ifp-&gt;if_output</code> function pointer.</p>

<figure class='code'><figcaption><span>In sys/netinet/ip_output.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">ip_output</span><span class="p">(</span><span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">opt</span><span class="p">,</span> <span class="k">struct</span> <span class="n">route</span> <span class="o">*</span><span class="n">ro</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ip_moptions</span> <span class="o">*</span><span class="n">imo</span><span class="p">,</span> <span class="k">struct</span> <span class="n">inpcb</span> <span class="o">*</span><span class="n">inp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Reset layer specific mbuf flags</span>
</span><span class='line'><span class="cm">         * to avoid confusing lower layers.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">m_clrprotoflags</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">IP_PROBE</span><span class="p">(</span><span class="n">send</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">ifp</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">ifp</span><span class="o">-&gt;</span><span class="n">if_output</span><span class="p">)(</span><span class="n">ifp</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span>
</span><span class='line'>            <span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="n">gw</span><span class="p">,</span> <span class="n">ro</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In conclusion, sending data across network is not a trivial task. The data from user application will pass through a series of layers. Each layer has its own responsibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thought on Learning Kanji With Remembering the Kanji]]></title>
    <link href="http://ake.in.th/2013/09/20/thought-on-learning-kanji-with-remembering-the-kanji/"/>
    <updated>2013-09-20T14:17:00+09:00</updated>
    <id>http://ake.in.th/2013/09/20/thought-on-learning-kanji-with-remembering-the-kanji</id>
    <content type="html"><![CDATA[<p>First of all, I would like to apologize that I haven&rsquo;t updated this blog for a very long time. After I graduated in March, I took a little break and started a full-time job on April. I worked on a lot of interesting projects. I cannot share what I worked on because I feel like it is a company secret. In May, I got a notification of acceptance from the University of Tsukuba as a scholarship research student. Therefore, I quited working on June to prepare studying Japanese.</p>

<p>Everyone who studies Japanese language will know that one of the most troublesome aspect, apart from formality, is Kanji. Kanji is derived from Chinese characters. For more information about the history of Kanji, please visit this <a href="http://www.tofugu.com/2010/03/22/the-history-of-kanji/" title="History of Kanji">blog</a>. The author knows how to make it fun. There are more than 3000 Kanji characters as far as I know. Fortunately, may be, there are 2200 Kanji characters that are considered &ldquo;Frequently Used Kanji (Jouyou Kanji 常用漢字)&rdquo; However, Kanji in daily life is going to be lower than that but there is still a lot. There is no wonder why Japanese students spend 12 years in schools to learn all necessary Kanji.</p>

<h2>Things you will encounter when you learn Kanji</h2>

<p>To me, there are 3 things that you will deal with when you learn Kanji which are:</p>

<p>Reading &ndash; Most of the time, there are 2 ways of reading a Kanji. There are Kun-yomi (訓読み) and On-yomi (音読み). Kun-yomi is a Japanese style of reading while On-yomi is a Chinese style of reading. Therefore, in most case, there will be at least 2 sounds that you have to know. The sound may also change according to the surroundings. Some characters have the same reading sound.</p>

<p>Meaning &ndash; Each character has its own meaning, at least one. Well, you have to remember them. There is no other way around. Some characters are synonymous and this can be a little confusing.</p>

<p>Writing &ndash; This is the most discouraging part. Each Kanji character has its own shape with different numbers of strokes. It is very common to forget how to write. Even native speakers sometimes encounter this problem.</p>

<p>As you can see, Kanji alone has a bunch of things to learn. It is considered difficult in the sense that there is a lot and you have to be consistent in learning and reviewing. Self-disciplining is hard, you know. This brings us the question, how should we learn it?</p>

<h2>Traditional way of learning Kanji for foreigners</h2>

<p>If you go to a Japanese language school, the order of Kanji that they will teach you is based on the Japanese Proficiency Test (JLPT). In order words, the Kanji is taught based on the frequency and the complexity of the meaning. You are probably be taught how to read including some of its compounds and are assigned to write each Kanji for hundreds times believing that you will be able to remember how to write them.</p>

<p>In addition, some Kanji characters may be taught by pictographs, transform picture to character. Unfortunately, not all Kanji can be learned using pictographs.</p>

<p>This approach is good from a perspective that you will be able to learn what are necessary for real life early. My opinion is that it is good for those who are busy. Teaching based on frequency and meaning complexity allows you to be able to access Japanese literatures faster.</p>

<p>However, as the number of Kanji grows, it is undoubtedly easy to forget the meaning and, especially, the writing. Those who used to study Japanese will be familiar with this kind of experience. This has hindered many Japanese learner greatly. However, I don&rsquo;t think that reading will be a problem. As mentioned earlier, reading of a Kanji is often based on the surroundings. Learners will usually get used to them eventually.</p>

<p>I want to remind that we are unlike the native that they have seen these Kanji characters since they were born and constantly used them. The way the language school teaches is almost identical to how native Japaneses learn in their schools; 12 years remember!.</p>

<p>This probably means that this approach is not efficient for us, foreigners.</p>

<h2>Alternative approach</h2>

<p>Fortunately, another way to learn Kanji exists. It is called &ldquo;mnemonic approach&rdquo;. The fundamental idea of this approach is that it breaks a Kanji character into smaller parts called &ldquo;primitives&rdquo; or &ldquo;radicals&rdquo; depending on what you prefer (I will go with radical). Those radicals are named and are used to construct a &ldquo;story&rdquo; using your imagination to help you remember those Kanji.</p>

<p>I decide to go with this approach using one of the most controversial book, &ldquo;<a href="http://www.amazon.com/Remembering-Kanji-Volume-Complete-Characters/dp/0824835921" title="Remembering the Kanji 1">Remembering the Kanji 1</a>&rdquo;.</p>

<h2>Remembering the Kanji (RTK)</h2>

<p>&ldquo;Remembering the Kanji&rdquo; is a series of 3 books for studying Kanji written by James W. Heisig. The first book is the most popular one. In the 6th edition, it offers 2200 Kanji characters along with learning approach. The second book teaches you how to read those Kanji. The last book offers another additional 965 Kanji characters for advanced learners. This blog post is about &ldquo;Remembering the Kanji 1 (RTK1)&rdquo;.</p>

<p>Heisig will explain why it is better to use mnemonic approach and his motivation in the introduction part of RTK1. You should not skip this part. Each Kanji will be assigned by with a unique keyword without any pronunciation (you will learn in RTK2). The author believes that it is more efficient to separate writing and meaning from reading and make it easier to study. Heisig organizes the book into 3 parts; stories, plots and elements. The first part will give you radicals, show you how to remember the writing and meaning with those radicals. Noting that a Kanji character itself can also serve as a radical. The purpose of the first part is to train the reader how to create and appreciate the story. The second part will give you only a plot leaving the full story as you exercise. The last part will give you only elements of the Kanji. It is the reader&rsquo;s job to fill up the story.</p>

<h2>Thought on Remembering the Kanji 1</h2>

<p>TL;DR It really works if you understand the point of the book.</p>

<p>Well, &ldquo;Remembering the Kanji 1&rdquo; can be awesome or overpriced worthless book depending on how do you understand the point of the book.</p>

<p>The keywords and the name of radicals can be very difficult especially for non-native English speaker like me. During the study, I always need an English dictionary. It is utterly mysterious how Heisig comes up with those keywords and few keywords are incorrect. If you try to judge the book from these, it is probably worthless for you. However, these are not the main point the book try to teach you.</p>

<p>The point of the book is simply to make you get used to those Kanji and establish a foundation for learning new Kanji in the future. The implication of this is learning Kanji is individual matter. It is very important to understand this. That means you can disagree with him. You can modify the keywords that suits yourself, probably in your own native language. You can group some radicals and name it if you think that it makes your life easier. These are what make this book awesome.</p>

<p>The mnemonic method works for me. Story will guide you how to write including the meaning. There is a certain thing I should emphasize. Heisig wants you to use &ldquo;imaginative memory&rdquo;. You are to create stories to &ldquo;impress&rdquo; yourself. Impression on the stories will allow you to remember and recall things much easier as it comes out from your imagination. However, you still need a consistent review to. By the time, the story will eventually fade away but you still know how to write those Kanji.</p>

<p>Regarding reviewing, Heisig suggests to review from keywords because you will review both writing and recognizing the Kanji at the same time. To me this is partial true. I sometimes have problem of recalling the meaning because of keywords that I am not familiar with. It may also be may fault that I don&rsquo;t know English vocabularies enough. However, I tend to be able to recall when I encounter them again.</p>

<p>It is not perfect but it works pretty well.</p>

<h2>Studying with Remembering the Kanji</h2>

<p>It is dangerous to travel alone. Going through RTK1 on your own will pretty tedious. Here are things I recommend:</p>

<ul>
<li><p><a href="http://ankisrs.net/" title="Anki">Anki</a>: Anki is a SRS flashcard application. This is the killer application for those who study languages. It will assist you studying and reviewing.</p></li>
<li><p><a href="https://ankiweb.net/shared/info/2756278936" title="RTK1 6th deck">RTK1 6th pre-storied deck</a>: The stories are from a community site for RTK named <a href="http://forum.koohii.com/" title="Reviewing the Kanji">Reviewing the Kanji</a> You will import this deck to your Anki.</p></li>
</ul>


<p>Using the pre-storied to study doesn&rsquo;t mean you are going to solely remember those stories. Many of pre-storied in the deck are good enough in my opinion. What you have to do is to read the stories, appreciate them and embrace them with vivid imagination. Don&rsquo;t forget you can disagree with those pre-stories. If you don&rsquo;t like it, just create your own. As mentioned earlier, it is individual business.</p>

<p>Well, what kind of story should you make? I would say any kind as long as you love it. Your stories may be based movies, novels, comics, religions, politics, your own experiences, your friends&#8217; stories, etc. The key is to create stories that you make yourself enjoy learning.</p>

<p>You are going to study every day. I recommend not to study more than 20 Kanji a day. The more you try to study for each day, the longer time you are going to spend on reviewing. Moreover, studying too fast may reduce your recalling ability; this is from my own experience. At this study rate, you should be able to finish RTK1 in 3 months and a half. However, it is recommend you find you own &ldquo;<a href="http://www.tofugu.com/2013/08/02/your-minimum-effective-dose-of-learning-japanese/" title="Minimal Effective Dose">Minimal Effect Dose (MED)</a>&rdquo;. Find you own study rate such that you feel comfortable. The more you study isn&rsquo;t always better.</p>

<p>My preferred Anki settings for RTK1 is not to introduce new card automatically. I found that reviewing first and then study the new separately is better for me. With this setting, when I don&rsquo;t feel like I am ready to study new Kanji, I can skip the new.</p>

<p>The reason I recommend you to use Anki is that it will schedule the review for you according to your performance. It works flawlessly from my experience. However, you need to be honest during the review. If you completely forget a Kanji, it is good to re-study it again. During the review, it is good to write Kanji characters onto a paper. I know that nowadays we have computers. However, you should prepare for the situation that it does not exist.</p>

<h2>Final thought</h2>

<p>One thing that you must understand about learning Kanji is that it is going to take a long time. I want you to keep in mind that your Kanji journey is not end yet after you finish the book. There are a lot of things left to learn. RTK1 is just the beginning. The key to success is that you need to be consistent in you study and stayed motivated.</p>

<p>The next question is what to do next after finishing RTK1? For me, I don&rsquo;t plan to continue RTK2 and RTK3 yet. I think that the best way to learn a language is to get used to it. It is better to continue on vocabularies, learn how to pronounce and use them; Kanji will serve as another ABC for them. After this, the more you get yourself in to Japanese, the better you are.</p>

<p>It takes time. Don&rsquo;t worry if you feel exhausted but never give up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Facebook Home With Quartz Composer]]></title>
    <link href="http://ake.in.th/2013/04/17/building-facebook-home-with-quartz-composer/"/>
    <updated>2013-04-17T11:37:00+09:00</updated>
    <id>http://ake.in.th/2013/04/17/building-facebook-home-with-quartz-composer</id>
    <content type="html"><![CDATA[<p>David O Brien has produced a tutorial on using Quartz Composer to emulate Facebook Home. It is worth watching. Quartz Composer, to me, is another hidden gem that Apple provides for developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offscreen Rendering and Multisampling With OpenGL]]></title>
    <link href="http://ake.in.th/2013/04/02/offscreening-and-multisampling-with-opengl/"/>
    <updated>2013-04-02T17:10:00+09:00</updated>
    <id>http://ake.in.th/2013/04/02/offscreening-and-multisampling-with-opengl</id>
    <content type="html"><![CDATA[<p>It has been for a while since my last post. I was enjoying with my senior project, &ldquo;Accelerating Map Rendering with GPU&rdquo;. In this project, my friend and I modified Mapnik, an opensource map rendering, to utilize Nvidia&rsquo;s <a href="https://developer.nvidia.com/nv-path-rendering" title="Nvidia's Path Rendering">Path Rendering</a>. Path Rendering is an OpenGL extension provided by Nvidia for vector graphic rendering. Nvidia <a href="http://dl.acm.org/citation.cfm?id=2366191" title="GPU-accelerated path rendering paper">claims</a> that its extensions aims to reduce overhead from traditional APIs when using them to draw vector graphics. In the end, we are able to make the map production 30-60% faster. Our implementation can be found on <a href="https://github.com/ake-koomsin/mapnik_nvpr">https://github.com/ake-koomsin/mapnik_nvpr</a></p>

<p>There are two important things that we had to achieve in order to use Path Rendering extension for map rendering, offscreen rendering and multisampling. Offscreen rendering is important because we don&rsquo;t want the renderer to show the intermediate result. Multisampling is for producing a quality map.</p>

<p>I think offscreen rendering combining with multisampling is an important piece of knowledge. It is also hard to find a complete refernce about these two. Therefore, I think it is worth writing about it.</p>

<h2>Offscreen Rendering</h2>

<p>Offscreen rendering is a technique that are commonly found in game development. Sometimes, there are situations that you want to generate a texture at runtime.</p>

<p>To set up offscreen rendering, you have to create your own &ldquo;Framebuffer Object (FBO)&rdquo;. Actually, OpenGL has its own default FBO. A result stored in the default FBO will be shown onto the screen while the result stored in our own FBO will be not. The code below demonstrates how to set up our own FBO.</p>

<figure class='code'><figcaption><span>Setting our own FBO for offscreen rendering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">fbo</span><span class="p">,</span> <span class="n">colorBuffer</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create and bind the FBO</span>
</span><span class='line'><span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fbo</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">fbo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create color render buffer</span>
</span><span class='line'><span class="n">glGenRenderbuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">colorBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindRenderbuffer</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">colorBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glRenderbufferStorage</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">GL_RGBA8</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">colorBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create depth render buffer (This is optional)</span>
</span><span class='line'><span class="n">glGenRenderbuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindRenderbuffer</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glRenderbufferStorage</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">GL_DEPTH24_STENCIL8</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_DEPTH_ATTACHMENT</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_STENCIL_ATTACHMENT</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bind Texture assuming we have created a texture</span>
</span><span class='line'><span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">aTexture</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Draw something</span>
</span><span class='line'><span class="n">drawGraphic</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is straightforward. First, we create a FBO. After that, we create render buffers and textures and attach them to our FBO.</p>

<h2>Multisampling</h2>

<p>By default, OpenGL does not care about antialiasing. As a result, the output contains stair-like artifacts which degrade visual quality. We have to enable multisampling by the code below.</p>

<figure class='code'><figcaption><span>Enabling multisampling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glEanble</span><span class="p">(</span><span class="n">GL_MULTISAMPLE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Combining Offscreen Rendering and Multisampling Together</h2>

<p>It turns out that to combine them together, we need additional set up which are multisample framebuffer storage and multisample texture. The code below demonstrates how to do.</p>

<figure class='code'><figcaption><span>Setting up FBO with Multisampling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Create multisample texture</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D_MULTISAMPLE</span><span class="p">,</span> <span class="n">aMultisampleTexture</span><span class="p">);</span>
</span><span class='line'><span class="n">glTexImage2DMultisample</span><span class="p">(</span><span class="n">GL_TEXTURE_2D_MULTISAMPLE</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">GL_RGBA</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">GL_TRUE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">fbo</span><span class="p">,</span> <span class="n">colorBuffer</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create and bind the FBO</span>
</span><span class='line'><span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fbo</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">fbo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create color render buffer</span>
</span><span class='line'><span class="n">glGenRenderbuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">colorBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindRenderbuffer</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">colorBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glRenderbufferStorageMultisample</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">GL_RGBA8</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">colorBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create depth render buffer (This is optional)</span>
</span><span class='line'><span class="n">glGenRenderbuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindRenderbuffer</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glRenderbufferStorageMultisample</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">GL_DEPTH24_STENCIL8</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_DEPTH_ATTACHMENT</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_STENCIL_ATTACHMENT</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">depthBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bind Texture assuming we have created a texture</span>
</span><span class='line'><span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">aTexture</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Enable multisampling</span>
</span><span class='line'><span class="n">glEanble</span><span class="p">(</span><span class="n">GL_MULTISAMPLE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Draw something</span>
</span><span class='line'><span class="n">drawGraphic</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Retrieving the result</h2>

<p>After offscreen rendering, you may want to display the result onto the screen. When you are using multisampling FBO, you are not able to use the result stored in the texture directly. You have to do &ldquo;Blitting&rdquo; which transfer the result from one FBO to another. The code below shows how to do.</p>

<figure class='code'><figcaption><span>Blitting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_READ_FRAMEBUFFER</span><span class="p">,</span> <span class="n">multisampledFBO</span><span class="p">);</span>
</span><span class='line'><span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_DRAW_FRAMEBUFFER</span><span class="p">,</span> <span class="n">normalFBO</span><span class="p">);</span> <span class="c1">// Normal FBO can be the default FBO too.</span>
</span><span class='line'><span class="n">glBlitFramebuffer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">,</span> <span class="n">GL_NEAREST</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope these snippets are a useful reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Kernel Extension for Logitech Presenter Device]]></title>
    <link href="http://ake.in.th/2012/11/17/my-first-kernel-extension-for-logitech-presenter-device/"/>
    <updated>2012-11-17T14:36:00+09:00</updated>
    <id>http://ake.in.th/2012/11/17/my-first-kernel-extension-for-logitech-presenter-device</id>
    <content type="html"><![CDATA[<p>I do a lot of presentation particularly those class projects. To make my presentation looks more professional, I decide to buy <a href="http://www.logitech.com/en-us/mice-pointers/presenter/professional-presenter-r800">Logitech Professional Presenter R800</a>. It is very nice. I recommend you to have one if you have to give a lot of presentation.</p>

<p>However, what bothers me is that not all buttons work with Apple Keynote, particularly Play button and Blank button. Well, the device is designed for Microsoft PowerPoint on Windows.</p>

<p>The questions are why it doesn&rsquo;t work and how to make it works with Keynote?</p>

<h2>How does the device work?</h2>

<p>Actually, that device is merely a wireless keyboard with only 4 keys including, Page Up, Page Down, F5 and . (dot). Page Up key and Page Down key are for moving slides back and forth. F5 is for starting a presentation. Dot key is for blanking.</p>

<p>PowerPoint conforms to all those keys but Keynote doesn&rsquo;t. Keynote uses, by default, CMD + ALT + P to start playing a slide and B for blanking the slide. Dot key for Keynote is for terminating the slideshow which may or may not what you want.</p>

<h2>What normal people would do</h2>

<p>The simple and sane way is to modify the shortcut key. You can go to System Preference > Keyboard > Keyboard Shortcuts > Application Shortcuts, add Keynote application and overide Play Slideshow to use F5. However, This approach doesn&rsquo;t work if you want to modify the Blank key.</p>

<p>You can ignore Blank key actually if you want it to stop playing the slide but I want to blank the screen. To me, stop playing to the slide means the presentation is end and I will be at the computer to stop the slideshow manually.</p>

<h2>What I actually do</h2>

<p>To satify my geek spirit, I write my own kernel extension for the device.</p>

<p>The first question is where should I start? The answer is <code>ioreg</code>. I know that the device is a keyboard. Keyboard is a kind of Human Interface Device (HID). Apple Keyboard is also a keyboard. Therefore, I should take a look at driver which is used with Apple Keyboard.</p>

<p>Before I go, I should mention a little bit about IOKit Framework first. IOKit Framework is a framework that Apple provides to developers for writing a device driver in an OOP way wtih C++.</p>

<p>The belowing snippet shows the partial output from <code>ioreg</code>:</p>

<figure class='code'><figcaption><span>ioreg output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>| |   |   +-o Apple Internal Keyboard / Trackpad@4600000  &lt;class IOUSBDevice, id 0x100000292, registered, matched, active, busy 0 (1173 ms), r$
</span><span class='line'>    | |   |     +-o IOUSBCompositeDriver  &lt;class IOUSBCompositeDriver, id 0x100000295, !registered, !matched, active, busy 0, retain 4&gt;
</span><span class='line'>    | |   |     +-o Apple Internal Keyboard@0  &lt;class IOUSBInterface, id 0x100000296, registered, matched, active, busy 0 (213 ms), retain 9&gt;
</span><span class='line'>    | |   |     | +-o AppleUSBTCKeyboard  &lt;class AppleUSBTCKeyboard, id 0x10000029a, registered, matched, active, busy 0 (33 ms), retain 12&gt;
</span><span class='line'>    | |   |     |   +-o IOHIDInterface  &lt;class IOHIDInterface, id 0x10000029f, registered, matched, active, busy 0 (31 ms), retain 7&gt;
</span><span class='line'>    | |   |     |   | +-o AppleEmbeddedKeyboard  &lt;class AppleEmbeddedKeyboard, id 0x1000002a0, registered, matched, active, busy 0 (0 ms), retain $
</span><span class='line'>    | |   |     |   |   +-o IOHIDKeyboard  &lt;class IOHIDKeyboard, id 0x1000002a2, registered, matched, active, busy 0 (0 ms), retain 8&gt;
</span><span class='line'>    | |   |     |   |   | +-o IOHIDSystem  &lt;class IOHIDSystem, id 0x1000002ac, registered, matched, active, busy 0 (0 ms), retain 20&gt;
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDStackShotUserClient  &lt;class IOHIDStackShotUserClient, id 0x10000035d, !registered, !matched, active, busy 0, $
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDUserClient  &lt;class IOHIDUserClient, id 0x100000371, !registered, !matched, active, busy 0, retain 5&gt;
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDParamUserClient  &lt;class IOHIDParamUserClient, id 0x100000385, !registered, !matched, active, busy 0, retain 5$
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c1, !registered, !matched, active, busy$
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c9, !registered, !matched, active, busy$
</span><span class='line'>    | |   |     |   |   +-o IOHIDConsumer  &lt;class IOHIDConsumer, id 0x1000002a3, registered, matched, active, busy 0 (0 ms), retain 8&gt;
</span><span class='line'>    | |   |     |   |   | +-o IOHIDSystem  &lt;class IOHIDSystem, id 0x1000002ac, registered, matched, active, busy 0 (0 ms), retain 20&gt;
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDStackShotUserClient  &lt;class IOHIDStackShotUserClient, id 0x10000035d, !registered, !matched, active, busy 0, $
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDUserClient  &lt;class IOHIDUserClient, id 0x100000371, !registered, !matched, active, busy 0, retain 5&gt;
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDParamUserClient  &lt;class IOHIDParamUserClient, id 0x100000385, !registered, !matched, active, busy 0, retain 5$
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c1, !registered, !matched, active, busy$
</span><span class='line'>    | |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c9, !registered, !matched, active, busy$
</span><span class='line'>    | |   |     |   |   +-o IOHIDSystem  &lt;class IOHIDSystem, id 0x1000002ac, registered, matched, active, busy 0 (0 ms), retain 19&gt;
</span><span class='line'>    | |   |     |   |     +-o IOHIDStackShotUserClient  &lt;class IOHIDStackShotUserClient, id 0x10000035d, !registered, !matched, active, busy 0, re$
</span><span class='line'>    | |   |     |   |     +-o IOHIDUserClient  &lt;class IOHIDUserClient, id 0x100000371, !registered, !matched, active, busy 0, retain 5&gt;
</span><span class='line'>    | |   |     |   |     +-o IOHIDParamUserClient  &lt;class IOHIDParamUserClient, id 0x100000385, !registered, !matched, active, busy 0, retain 5&gt;
</span><span class='line'>    | |   |     |   |     +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c1, !registered, !matched, active, busy 0$
</span><span class='line'>    | |   |     |   |     +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c9, !registered, !matched, active, busy 0$
</span><span class='line'>    | |   |     |   +-o IOHIDLibUserClient  &lt;class IOHIDLibUserClient, id 0x1000003c7, !registered, !matched, active, busy 0, retain 6&gt;
</span><span class='line'>    | |   |     |   +-o IOHIDLibUserClient  &lt;class IOHIDLibUserClient, id 0x10000044b, !registered, !matched, active, busy 0, retain 6&gt;
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>What does this information tell us? It shows the hierarchy of drivers which implys us the chain of command. For example, IOHIDInterface is said to be a provider of AppleEmbeddedKeyboard; you can think of it as a data provider.</p>

<p>The class beginning with IO belongs to the system. As you can see, there are 2 custom drivers, AppleUSBTCKeyboard and AppleEmbeddedKeyboard. I investigate further by the command <code>ioreg -c</code> and find out that AppleUSBTCKeyboard is a subclass of IOUSBHIDDriver and AppleEmbeddedKeyboard is a subclass of IOHIDEventDriver.</p>

<p>My initial assumption about the driver is that it should do something about event dispatching. I start by looking at IOUSBHIDDriver.h and IOHIDEventDriver.h and found nothing that seems to match my assumption. Is my assumption wrong?</p>

<p>I google &lsquo;AppleEmbeddedKeyboard&rsquo; and find a source code from Apple open source repository. I take a look at AppleEmbeddedKeyboard.cpp find this method overiding interesting:</p>

<figure class='code'><figcaption><span>dispatchKeyboardEvent method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">AppleEmbeddedKeyboard</span><span class="o">::</span><span class="n">dispatchKeyboardEvent</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">AbsoluteTime</span>                <span class="n">timeStamp</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">UInt32</span>                      <span class="n">usagePage</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">UInt32</span>                      <span class="n">usage</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">UInt32</span>                      <span class="n">value</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">IOOptionBits</span>                <span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that the method <code>dispatchKeyboardEvent()</code> is declared in IOHIDEventService.h. So, I decide to write the kernel extension based on IOHIDEventDriver. With Apple documentation and suggestion from Pavel Prokofiev who writes <a href="http://code.google.com/p/macosx-nosleep-extension/">macosx-nosleep-extension</a>, I am able to complete it (It is not that hard but takes time to understand what things are).</p>

<p>What my code does is intercepting the key and replace it if necessary.</p>

<p>You can see my source code here <a href="https://github.com/ake-koomsin/LogitechWirelessPresenterKext">https://github.com/ake-koomsin/LogitechWirelessPresenterKext</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thought on Writing a Report With LaTeX]]></title>
    <link href="http://ake.in.th/2012/04/11/thought-on-writing-a-report-with-latex/"/>
    <updated>2012-04-11T12:23:00+09:00</updated>
    <id>http://ake.in.th/2012/04/11/thought-on-writing-a-report-with-latex</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not dead!</p>

<p>I haven&rsquo;t update my blog for a month becasue I really have no time. I had to study from 8:40 to 17:20 every day due to the great flood. Agh! I hate school time.</p>

<p>I just finished my final exams yesterday. I feel really great now, just like getting out of the jail.</p>

<p>Let&rsquo;s come back to the story about Latex.</p>

<p>I had to write a software architecture document as an assignment. My teacher provided me a Microsoft Word template but it looks suck. Therefore, I decided to write from scratch with LaTeX.</p>

<p>I had to install MacTeX for Lion. Its size was pretty large in my opinion but that was fine. I downloaded TeXShop 3.04 for Lion to use as a LaTeX editor.</p>

<p>To me, writing a report with LaTeX is like writing a HTML page. I just specify chapters and sections that I am going to have and provide their content. LaTeX will take care of the output for you and it is just beautiful. I see the semantics in my source file.</p>

<p>LaTeX is easy until you want to customize something.</p>

<p>To customize something, I found that I had to use extra packages and had to read its document which was not quite productive at the beginning.</p>

<p>Things became more complicated when I had to deal wtih table layout. I would say that it was very challeging. I took a lot of time to figure out how to get the table layout I want. However, I felt like I was using table the wrong way so that it was complicated.</p>

<p>To be honest, I&rsquo;m still not be able to remember all the essential commands in LaTeX. I just open the documentation when I need.</p>

<p>Anyway, It was fun and I will continue using it for sure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Outguess on OS X Lion With Homebrew]]></title>
    <link href="http://ake.in.th/2012/01/21/install-outguess-on-os-x-lion-with-homebrew/"/>
    <updated>2012-01-21T20:36:00+09:00</updated>
    <id>http://ake.in.th/2012/01/21/install-outguess-on-os-x-lion-with-homebrew</id>
    <content type="html"><![CDATA[<p>In my security and cryptography class, My teacher showed me an interesting program called outguess. What it does it hide a plain text into a jpg file. This method is known as steganography.</p>

<p>The program will read an input text file and slightly change pixels color in the image in such the way that it is not going to be visible.</p>

<p>Here is an example of putting some text into an image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>outguess -d some_text.txt image.jpg image_result.jpg
</span></code></pre></td></tr></table></div></figure>


<p>Here is how to extract text from the image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>outguess -r image_result.jpg hidden_text.txt
</span></code></pre></td></tr></table></div></figure>


<p>Here is how to install outguess with homebrew. Firstly, we need to create a formula.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew create http://www.outguess.org/outguess-0.2.tar.gz
</span><span class='line'>brew edit outguess
</span></code></pre></td></tr></table></div></figure>


<p>Then, modify the outguess formula like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;formula&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Outguess</span> <span class="o">&lt;</span> <span class="no">Formula</span>
</span><span class='line'>  <span class="n">homepage</span> <span class="s1">&#39;http://www.outguess.org/&#39;</span>
</span><span class='line'>  <span class="n">url</span> <span class="s1">&#39;http://www.outguess.org/outguess-0.2.tar.gz&#39;</span>
</span><span class='line'>  <span class="n">mirror</span> <span class="s1">&#39;http://www.mirrors.wiretapped.net/security/steganography/outguess/outguess-0.2.tar.gz&#39;</span>
</span><span class='line'>  <span class="n">md5</span> <span class="s1">&#39;321f23dc0badaba4350fa66b59829064&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">install</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Segmentation fault occurs if compiling with clang, use llvm-gcc instead</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">.</span><span class="n">gcc</span> <span class="ss">:force</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--disable-debug&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;--disable-dependency-tracking&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;--prefix=</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;--sysconfdir=</span><span class="si">#{</span><span class="n">etc</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;--mandir=</span><span class="si">#{</span><span class="n">man</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;./configure&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;make&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bin</span><span class="o">.</span><span class="n">install</span> <span class="s2">&quot;outguess&quot;</span>
</span><span class='line'>    <span class="n">man1</span><span class="o">.</span><span class="n">install</span> <span class="s2">&quot;outguess.1&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it. In order to install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install outguess
</span></code></pre></td></tr></table></div></figure>


<p>I actually pull-requested to homebrew main repository. However, the maintainers don&rsquo;t want a formula that is not clang compatible because llvm-gcc is going away. I agreed with them. Even though there is a successor of llvm-gcc, DragonEgg, we still don&rsquo;t know its future and keeping clang-incompatible formula away from main repository make the repository clean. If I have time, I think I will take a look at the source code and creating a patch. Noteing that this program seems to be no longer maintained.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Date Command in Cron Job]]></title>
    <link href="http://ake.in.th/2012/01/04/using-date-command-in-cron-job/"/>
    <updated>2012-01-04T21:26:00+09:00</updated>
    <id>http://ake.in.th/2012/01/04/using-date-command-in-cron-job</id>
    <content type="html"><![CDATA[<p>I had to set a cron job to back up mysql database and its format I wanted is like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>back_up_YYYY_MM_DD.sql</span></code></pre></td></tr></table></div></figure>


<p>And here was my first initial configuration that I added to <code>/etc/crontab</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>00 11   * * *   a_user   mysqldump -u root -pSomePass db &gt; /home/a_user/www/sql_backup/back_up_<span class="sb">`</span>date +%Y_%d_%m<span class="sb">`</span>.sql
</span></code></pre></td></tr></table></div></figure>


<p>Actually, I noticed a strange syntax color at the end of the line in Vim. I thought it is just misparsing so that I ommited it.</p>

<p>And here was the output in <code>/var/log/syslog</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Jan  4 11:00:01 a_user CRON<span class="o">[</span>3427<span class="o">]</span>: <span class="o">(</span>a_user<span class="o">)</span> CMD <span class="o">(</span>  mysqldump -u root -pSomePass db &gt; /home/a_user/www/sql_backup/back_up_<span class="sb">`</span>date +<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Something was wrong as you can see; it was not complete.</p>

<p>In order to fix this, I had to escape the &lsquo;%&rsquo; sign</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>00 11   * * *   a_user   mysqldump -u root -pSomePass db &gt; /home/gizmo/www/sql_backup/back_up_<span class="sb">`</span>date +<span class="se">\%</span>Y_<span class="se">\%</span>d_<span class="se">\%</span>m<span class="sb">`</span>.sql
</span></code></pre></td></tr></table></div></figure>


<p>Now, everything works fine :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Zyxel NWD-270N Works on Ubuntu 10.04 LTS]]></title>
    <link href="http://ake.in.th/2012/01/02/getting-zyxel-nwd-270n-works-on-ubuntu-10-dot-04-lts/"/>
    <updated>2012-01-02T01:36:00+09:00</updated>
    <id>http://ake.in.th/2012/01/02/getting-zyxel-nwd-270n-works-on-ubuntu-10-dot-04-lts</id>
    <content type="html"><![CDATA[<p>I have to install Ubuntu 10.04 LTS on a machine as a sales terminal which will run Ruby on Rails. The problem that I encounter is Zyxel NWD-270N, a wireless adaptor. At the first glance, it looks like it should work out of box. Zyxel NWD-270N supposes to use rt2870sta driver.</p>

<p>Unfortunately, there seems to be something wrong with Ubuntu 10.04 LTS that tries to load rt2800usb and it does not work. So, I google and find this <a href="http://ubuntuforums.org/showthread.php?t=1419504&amp;page=6">link</a></p>

<p>Noting that I haven&rsquo;t updated the Ubuntu after install yet.</p>

<p>Since this thread is about Asus USB-N13, I have to find my vendor and product ID first by run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lsusb
</span></code></pre></td></tr></table></div></figure>


<p>And here is the partial result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>Bus 002 Device 003: ID 0586:341a Zyxel Communications Corp.
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The next step is to tell the OS that it should use rt2870sta driver when it sees this vendor and product ID. There are two files that I have to create</p>

<p>The first one is /etc/udev/rules.d/network_drivers.rules</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/udev/rules.d/network_drivers.rules
</span></code></pre></td></tr></table></div></figure>


<p>and add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ACTION</span><span class="o">==</span><span class="s2">&quot;add&quot;</span>, <span class="nv">SUBSYSTEM</span><span class="o">==</span><span class="s2">&quot;usb&quot;</span>, ATTR<span class="o">{</span>idVendor<span class="o">}==</span><span class="s2">&quot;0586&quot;</span>, ATTR<span class="o">{</span>idProduct<span class="o">}==</span><span class="s2">&quot;341a&quot;</span>, RUN+<span class="o">=</span><span class="s2">&quot;/sbin/modprobe -qba rt2870sta&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second one is /etc/modprobe.d/network_drivers.conf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/modprobe.d/network_drivers.conf
</span></code></pre></td></tr></table></div></figure>


<p>and add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>install rt2870sta /sbin/modprobe --ignore-install rt2870sta <span class="nv">$CMDLINE_OPTS</span>; /bin/echo <span class="s2">&quot;0586 341a&quot;</span> &gt; /sys/bus/usb/drivers/rt2870/new_id
</span></code></pre></td></tr></table></div></figure>


<p>After restart, it seems to be able to find wireless access points but it is not able to connect. Therefore, I decide to find an old wireless adaptor as a temporary adaptor in order to connect to the Internet to run update:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude update
</span><span class='line'>sudo aptitude upgrade
</span></code></pre></td></tr></table></div></figure>


<p>And also install (I don&rsquo;t know if it is necessary after reading the package description &ldquo;This empty package allows people to keep their backported wireless modules up-to-date when upgrading their Linux kernel.&rdquo; I install it anyway)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude install linux-backports-modules-wireless-lucid-generic
</span></code></pre></td></tr></table></div></figure>


<p>After restart again, it works! However, it doesn&rsquo;t seems to run on wireless N, only at 54 Mbps. Anyway it works and I can continue my work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Greeting]]></title>
    <link href="http://ake.in.th/2012/01/01/greeting/"/>
    <updated>2012-01-01T00:01:00+09:00</updated>
    <id>http://ake.in.th/2012/01/01/greeting</id>
    <content type="html"><![CDATA[<p>It is a very good time to launch this blog on New Year.</p>

<p>I aim to post everything I learned from school and work as a technical journey. I hope that it might be useful for readers and me someday in the future.</p>

<p>Everything is like a dot. In order to understand things around, it is important to find the way to connect those dots. It is good to have a variety of knowledge and skills. Everything that seems unimportant for now might be useful in the near future.</p>

<p>I do believe that in order to succeed in programming, I need to achieve both theoretical and technical knowledge; to be come pragmatic. I will do; there is no reason not to do.</p>

<p>Happy New Year, This year will be another great year for you :D.</p>
]]></content>
  </entry>
  
</feed>
