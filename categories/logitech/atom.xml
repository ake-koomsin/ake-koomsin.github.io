<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: logitech | Ake Koomsin]]></title>
  <link href="http://ake.in.th//categories/logitech/atom.xml" rel="self"/>
  <link href="http://ake.in.th/"/>
  <updated>2016-01-09T21:43:41+09:00</updated>
  <id>http://ake.in.th/</id>
  <author>
    <name><![CDATA[Ake Koomsin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My first kernel extension for Logitech Presenter device]]></title>
    <link href="http://ake.in.th/2012/11/17/my-first-kernel-extension-for-logitech-presenter-device/"/>
    <updated>2012-11-17T14:36:00+09:00</updated>
    <id>http://ake.in.th/2012/11/17/my-first-kernel-extension-for-logitech-presenter-device</id>
    <content type="html"><![CDATA[<p>I do a lot of presentation particularly those class projects. To make my presentation looks more professional, I decide to buy <a href="http://www.logitech.com/en-us/mice-pointers/presenter/professional-presenter-r800">Logitech Professional Presenter R800</a>. It is very nice. I recommend you to have one if you have to give a lot of presentation.</p>

<p>However, what bothers me is that not all buttons work with Apple Keynote, particularly Play button and Blank button. Well, the device is designed for Microsoft PowerPoint on Windows.</p>

<p>The questions are why it doesn&rsquo;t work and how to make it works with Keynote?</p>

<h2>How does the device work?</h2>

<p>Actually, that device is merely a wireless keyboard with only 4 keys including, Page Up, Page Down, F5 and . (dot). Page Up key and Page Down key are for moving slides back and forth. F5 is for starting a presentation. Dot key is for blanking.</p>

<p>PowerPoint conforms to all those keys but Keynote doesn&rsquo;t. Keynote uses, by default, CMD + ALT + P to start playing a slide and B for blanking the slide. Dot key for Keynote is for terminating the slideshow which may or may not what you want.</p>

<h2>What normal people would do</h2>

<p>The simple and sane way is to modify the shortcut key. You can go to System Preference > Keyboard > Keyboard Shortcuts > Application Shortcuts, add Keynote application and overide Play Slideshow to use F5. However, This approach doesn&rsquo;t work if you want to modify the Blank key.</p>

<p>You can ignore Blank key actually if you want it to stop playing the slide but I want to blank the screen. To me, stop playing to the slide means the presentation is end and I will be at the computer to stop the slideshow manually.</p>

<h2>What I actually do</h2>

<p>To satify my geek spirit, I write my own kernel extension for the device.</p>

<p>The first question is where should I start? The answer is <code>ioreg</code>. I know that the device is a keyboard. Keyboard is a kind of Human Interface Device (HID). Apple Keyboard is also a keyboard. Therefore, I should take a look at driver which is used with Apple Keyboard.</p>

<p>Before I go, I should mention a little bit about IOKit Framework first. IOKit Framework is a framework that Apple provides to developers for writing a device driver in an OOP way wtih C++.</p>

<p>The belowing snippet shows the partial output from <code>ioreg</code>:</p>

<p>``` text ioreg output
&hellip;
| |   |   +-o Apple Internal Keyboard / Trackpad@4600000  &lt;class IOUSBDevice, id 0x100000292, registered, matched, active, busy 0 (1173 ms), r$</p>

<pre><code>| |   |     +-o IOUSBCompositeDriver  &lt;class IOUSBCompositeDriver, id 0x100000295, !registered, !matched, active, busy 0, retain 4&gt;
| |   |     +-o Apple Internal Keyboard@0  &lt;class IOUSBInterface, id 0x100000296, registered, matched, active, busy 0 (213 ms), retain 9&gt;
| |   |     | +-o AppleUSBTCKeyboard  &lt;class AppleUSBTCKeyboard, id 0x10000029a, registered, matched, active, busy 0 (33 ms), retain 12&gt;
| |   |     |   +-o IOHIDInterface  &lt;class IOHIDInterface, id 0x10000029f, registered, matched, active, busy 0 (31 ms), retain 7&gt;
| |   |     |   | +-o AppleEmbeddedKeyboard  &lt;class AppleEmbeddedKeyboard, id 0x1000002a0, registered, matched, active, busy 0 (0 ms), retain $
| |   |     |   |   +-o IOHIDKeyboard  &lt;class IOHIDKeyboard, id 0x1000002a2, registered, matched, active, busy 0 (0 ms), retain 8&gt;
| |   |     |   |   | +-o IOHIDSystem  &lt;class IOHIDSystem, id 0x1000002ac, registered, matched, active, busy 0 (0 ms), retain 20&gt;
| |   |     |   |   |   +-o IOHIDStackShotUserClient  &lt;class IOHIDStackShotUserClient, id 0x10000035d, !registered, !matched, active, busy 0, $
| |   |     |   |   |   +-o IOHIDUserClient  &lt;class IOHIDUserClient, id 0x100000371, !registered, !matched, active, busy 0, retain 5&gt;
| |   |     |   |   |   +-o IOHIDParamUserClient  &lt;class IOHIDParamUserClient, id 0x100000385, !registered, !matched, active, busy 0, retain 5$
| |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c1, !registered, !matched, active, busy$
| |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c9, !registered, !matched, active, busy$
| |   |     |   |   +-o IOHIDConsumer  &lt;class IOHIDConsumer, id 0x1000002a3, registered, matched, active, busy 0 (0 ms), retain 8&gt;
| |   |     |   |   | +-o IOHIDSystem  &lt;class IOHIDSystem, id 0x1000002ac, registered, matched, active, busy 0 (0 ms), retain 20&gt;
| |   |     |   |   |   +-o IOHIDStackShotUserClient  &lt;class IOHIDStackShotUserClient, id 0x10000035d, !registered, !matched, active, busy 0, $
| |   |     |   |   |   +-o IOHIDUserClient  &lt;class IOHIDUserClient, id 0x100000371, !registered, !matched, active, busy 0, retain 5&gt;
| |   |     |   |   |   +-o IOHIDParamUserClient  &lt;class IOHIDParamUserClient, id 0x100000385, !registered, !matched, active, busy 0, retain 5$
| |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c1, !registered, !matched, active, busy$
| |   |     |   |   |   +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c9, !registered, !matched, active, busy$
| |   |     |   |   +-o IOHIDSystem  &lt;class IOHIDSystem, id 0x1000002ac, registered, matched, active, busy 0 (0 ms), retain 19&gt;
| |   |     |   |     +-o IOHIDStackShotUserClient  &lt;class IOHIDStackShotUserClient, id 0x10000035d, !registered, !matched, active, busy 0, re$
| |   |     |   |     +-o IOHIDUserClient  &lt;class IOHIDUserClient, id 0x100000371, !registered, !matched, active, busy 0, retain 5&gt;
| |   |     |   |     +-o IOHIDParamUserClient  &lt;class IOHIDParamUserClient, id 0x100000385, !registered, !matched, active, busy 0, retain 5&gt;
| |   |     |   |     +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c1, !registered, !matched, active, busy 0$
| |   |     |   |     +-o IOHIDEventSystemUserClient  &lt;class IOHIDEventSystemUserClient, id 0x1000003c9, !registered, !matched, active, busy 0$
| |   |     |   +-o IOHIDLibUserClient  &lt;class IOHIDLibUserClient, id 0x1000003c7, !registered, !matched, active, busy 0, retain 6&gt;
| |   |     |   +-o IOHIDLibUserClient  &lt;class IOHIDLibUserClient, id 0x10000044b, !registered, !matched, active, busy 0, retain 6&gt;
</code></pre>

<p>&hellip;
```</p>

<p>What does this information tell us? It shows the hierarchy of drivers which implys us the chain of command. For example, IOHIDInterface is said to be a provider of AppleEmbeddedKeyboard; you can think of it as a data provider.</p>

<p>The class beginning with IO belongs to the system. As you can see, there are 2 custom drivers, AppleUSBTCKeyboard and AppleEmbeddedKeyboard. I investigate further by the command <code>ioreg -c</code> and find out that AppleUSBTCKeyboard is a subclass of IOUSBHIDDriver and AppleEmbeddedKeyboard is a subclass of IOHIDEventDriver.</p>

<p>My initial assumption about the driver is that it should do something about event dispatching. I start by looking at IOUSBHIDDriver.h and IOHIDEventDriver.h and found nothing that seems to match my assumption. Is my assumption wrong?</p>

<p>I google &lsquo;AppleEmbeddedKeyboard&rsquo; and find a source code from Apple open source repository. I take a look at AppleEmbeddedKeyboard.cpp find this method overiding interesting:</p>

<p>``` c++ dispatchKeyboardEvent method
void AppleEmbeddedKeyboard::dispatchKeyboardEvent(</p>

<pre><code>                            AbsoluteTime                timeStamp,
                            UInt32                      usagePage,
                            UInt32                      usage,
                            UInt32                      value,
                            IOOptionBits                options)
</code></pre>

<p>{</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>It turns out that the method <code>dispatchKeyboardEvent()</code> is declared in IOHIDEventService.h. So, I decide to write the kernel extension based on IOHIDEventDriver. With Apple documentation and suggestion from Pavel Prokofiev who writes <a href="http://code.google.com/p/macosx-nosleep-extension/">macosx-nosleep-extension</a>, I am able to complete it (It is not that hard but takes time to understand what things are).</p>

<p>What my code does is intercepting the key and replace it if necessary.</p>

<p>You can see my source code here <a href="https://github.com/ake-koomsin/LogitechWirelessPresenterKext">https://github.com/ake-koomsin/LogitechWirelessPresenterKext</a>.</p>
]]></content>
  </entry>
  
</feed>
